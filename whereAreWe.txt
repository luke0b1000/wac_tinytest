Testing (how to write code that makes sure your code works)
    1. What is testing?
        <script src="../tinytest.js"></script>
        <script>
        test({
            'It should Name': function() {
                callTestStuff();
                eq(???variableOfExpectedValue, expectedValue);
            }
        });
        </script>
    2. forEach, first steps
    3. forEach, callback arguments
    4. forEach, optional this
    5. filter
    6. map
        var weirdArray = [,1,undefined];    // (Array) [empty, 1, undefined]
        weirdArray[0]; // undefined
        weirdArray[1]; // 1
        weirdArray[2]; // undefined // why is there similar results with weirdArray[0]

        0 in weirdArray;    // false        // test in the index position if weirdArray has a value
        1 in weirdArray;    // true
        2 in weirdArray;    // true
        
        var fakeArray = {
            1:1,
            2: undefined,
        }
        fakeArray[0];   // undefined    // doesn't exist
        fakeArray[1];   // 1
        fakeArray[2];   // undefined

        propertyName in objext
        0 in fakeArray; // false
        1 in fakeArray; // true
        2 in fakeArray; // true     // cause it exist as a propertyName
    7. reduce, first steps
        function reduce(array, callback, startingValue) {
            var resultsSoFar = startingValue;
            for (var i = 0; i < array.length; i++) {
                resultsSoFar = callback(resultsSoFar, array[i]);
            }
            return resultsSoFar;
        }
        reduce(['g','o','r','d','o','n'], function(resultsSoFar, nextLetter) {
            return resultsSoFar + nextLetter;       // No InitialValue, so first run is resultsSoFar = g and nextLetter = o
        }, '');         // "gordon" (String)
    8. reduce, deciphering docs
        Protoype implmentation:
        function reduce(array, callback, startingValue) {
            var resultsSoFar = startingValue;
            for (var i = 0; i < array.length; i++) {
                resultsSoFar = callback(resultsSoFar, array[i], i, array);
            }
            return resultsSoFar;
        }

        Function signature:
        reduce(array, callback[, initialValue])

        Callback parameters:
            previousValue
            currentValue
            currentIndex
            array
        
        Returns a single value.

        Description:

        Executes the callback function once for each element present in the array   // BAD doesn't work with edgecases
        Excludes holes in the array (e.g. [/* hole */, 1])

        Case A: initialValue is provided
            previousValue will be equal to initialValue.
            currentValue will be equal to the first value in the array.
            callback will start at index 0.

        Case B: initialValue not provided
            previousValue will be equal to the first value in array.
            currentValue will be equal to the second.
            callback will start at index 1, which is the second element
        
        Edge cases.
            If array is empty and no initialValue was provided, TypeError should be thrown.
            reduce([], function(){}) ==> TypeError

            If array has one element (regardless of position) and no initialValue was provided,
            or if initialValue is provided but the array is empty, the solo value would be
            returned, without calling callback.

            reduce([/* hole */, 1], function(){})
            return 1 without calling callback

            reduce([1], function() {})
            return 1 without calling callback

            reduce([], function() {}, 0)
            return 0 without calling callback

            reduce([/* hole */, /* hole */], function() {}, 0)
            return 0 without calling callback

        Requirements:
            If initialValue, previousValue should start with initialValue.
            If initialValue, currentValue should start with array[0].
            If initialValue, callback will start at index 0.

            If no initialValue, previousValue should start with array[0].
            If no initialValue, currentValue should start with array[1].
            If no initialValue, callback will start at index 1.

            If initialValue, and array is empty, return initialValue without calling callback.
            If no initialValue, and array has one element, it should return that element without calling callback.

            It should actually reduce.
            It should exclude holes.
            If array is empty, and no initialValue, throw TypeError.
            It should pass array as fourth argument to callback.
    9. reduce, finishing up
        Object.keys([,1,,3,,5]) // will return the indexes that are not holed ["1", "3", "5"]
        Boolean(index in Array)     // check if that index exist in Array

        try {
            // code that will run and possibly produce the error
        } catch(error) {
            console.log(error);
            if (e instanceOf TypeError) {   // object instanceOf contructor // e is the object, is it an TypeError

            }
        }

        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch

        throw new TypeError('Error message you want to throw');

        Becareful of callbacks that may increase length, you may loop forever with array.length